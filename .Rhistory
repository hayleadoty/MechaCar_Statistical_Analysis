library(tidyverse)
mecha_mpg <- read.csv(file='MechaCar_mpg.csv',check.names= F,stringsAsFactors = F)
mecha_mpg(head)
View(mecha_mpg)
> lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data= mecha_mpg) #generate multiple linear regression model
> lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mecha_mpg) #generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mecha_mpg) #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mecha_mpg)) #generate summary stats to determine the p-value and the r-squared value for the linear regression model
library(tidyverse)
mecha_mpg <- read.csv(file='MechaCar_mpg.csv', stringsAsFactors = F)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mecha_mpg) #generate multiple linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mecha_mpg)) #generate summary stats to determine the p-value and the r-squared value for the linear regression model
library(tidyverse)
mecha_mpg <- read.csv(file='MechaCar_mpg.csv', stringsAsFactors = F)
#generate multiple linear regression model
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mecha_mpg)
#generate summary stats to determine the p-value and the r-squared value for the linear regression model
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mecha_mpg))
#read in the csv file for the Suspension_Coil dataset
suspension_coil <- read.csv(file='Suspension_Coil.csv', stringsAsFactors = F)
View(suspension_coil)
#write an RScript that creates a total_summary data frame using the summarize() function
#to get the mean, median, variance, and standard deviation of the suspension coil’s PSI column
total_summary <- suspension_coil %>% group_by(VehicleID) %>% summarize(PSI=mean(PSI), PSI=median(PSI), PSI=var(PSI), PSI=sd(PSI), .groups = 'keep')
View(total_summary)
#write an RScript that creates a total_summary data frame using the summarize() function
#to get the mean, median, variance, and standard deviation of the suspension coil’s PSI column
total_summary <- suspension_coil %>% summarize(PSI=mean(PSI), PSI=median(PSI), PSI=var(PSI), PSI=sd(PSI), .groups = 'keep')
View(total_summary)
#write an RScript that creates a total_summary data frame using the summarize() function
#to get the mean, median, variance, and standard deviation of the suspension coil’s PSI column
total_summary <- suspension_coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
#write an RScript that creates a lot_summary dataframe using the group_by()
#and the summarize() functions to group each manufacturing lot by the mean, median,
#variance, and standard deviation of the suspension coil’s PSI column
lot_summary <- suspension_coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups = 'keep')
View(lot_summary)
#write an RScript using the t.test() function to determine if the PSI across all manufacturing
#lots is statistically different from the population mean of 1,500 pounds per square inch
t.test(log10(suspension_coil$PSI), mu = mean(log10(suspension_coil$PSI)))
#write an RScript using the t.test() function to determine if the PSI across all manufacturing
#lots is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI))
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mecha_mpg)) #generate summary stats to determine the p-value and the r-squared value for the linear regression model
?t.test()
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset=Manufacturing_Lot$Lot1)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset=Lot1)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset=Lot2)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset=Lot3)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset='Lot3')
?model.frame
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset=[1, 50])
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset=1, 50)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset= Lot1 %in% suspension_coil$Manufacturing_Lot)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset= 'Lot1' %in% suspension_coil$Manufacturing_Lot)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset= Lot2 %in% suspension_coil$Manufacturing_Lot)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset= Lot3 %in% suspension_coil$Manufacturing_Lot)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset(suspension_coil$Manufacturing_Lot == Lot1))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset(Lot1 %in% suspension_coil$Manufacturing_Lot))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset(suspension_coil$Manufacturing_Lot, Manufacturing_Lot == Lot 1))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset(suspension_coil$Manufacturing_Lot, Manufacturing_Lot == Lot1))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset(suspension_coil$Manufacturing_Lot))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset = subset(suspension_coil$Manufacturing_Lot))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset = subset(suspension_coil$Manufacturing_Lot, select = Lot1))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset = subset(suspension_coil$Manufacturing_Lot, select == Lot1))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset = Manufacturing_Lot == Lot1)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset = Manufacturing_Lot == Lot3)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset = subset(Manufacturing_Lot == Lot3))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset(Manufacturing_Lot == Lot3))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI), subset = subset(Manufacturing_Lot == Lot3))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(subset(suspension_coil$PSI, mu = mean(suspension_coil$PSI), Manufacturing_Lot=='Lot1')
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(subset(suspension_coil$PSI, mu = mean(suspension_coil$PSI), Manufacturing_Lot=='Lot1'))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(subset(suspension_coil$PSI, mu = mean(suspension_coil$PSI), Manufacturing_Lot=='Lot1')$PSI)
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot
#is statistically different from the population mean of 1,500 pounds per square inch
t.test(subset(suspension_coil,Manufacturing_Lot=="Lot1")$PSI, mu = mean(suspension_coil$PSI))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot is statistically different
#from the population mean
#Lot 1:
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot2")$PSI, mu = mean(suspension_coil$PSI))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot is statistically different
#from the population mean
#Lot 1:
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot3")$PSI, mu = mean(suspension_coil$PSI))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot is statistically different
#from the population mean
#Lot 1:
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot1")$PSI, mu = mean(suspension_coil$PSI))
#Lot 2:
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot2")$PSI, mu = mean(suspension_coil$PSI))
#Lot 3:
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot3")$PSI, mu = mean(suspension_coil$PSI))
t.test(subset(suspension_coil$PSI, Manufacturing_Lot=="Lot1")$PSI, mu = mean(suspension_coil$PSI))
t.test(subset(lot_summary, Manufacturing_Lot=="Lot1")$PSI, mu = mean(suspension_coil$PSI))
#write three more RScripts in your MechaCarChallenge.RScript using the t.test() function
#and its subset() argument to determine if the PSI for each manufacturing lot is statistically different
#from the population mean
#Lot 1:
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot1")$PSI, mu = mean(suspension_coil$PSI))
#Lot 2:
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot2")$PSI, mu = mean(suspension_coil$PSI))
#Lot 3:
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot3")$PSI, mu = mean(suspension_coil$PSI))
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot1")$PSI, mu = mean(suspension_coil$PSI))
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot2")$PSI, mu = mean(suspension_coil$PSI))
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot3")$PSI, mu = mean(suspension_coil$PSI))
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot1")$PSI, mu = mean(suspension_coil$PSI))
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot2")$PSI, mu = mean(suspension_coil$PSI))
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot3")$PSI, mu = mean(suspension_coil$PSI))
t.test(subset(suspension_coil, Manufacturing_Lot=="Lot1")$PSI, mu = mean(suspension_coil$PSI))
t.test(suspension_coil$PSI, mu = mean(suspension_coil$PSI))
